// Generated by Haxe 4.1.2

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace color {
	public class Color : global::haxe.lang.Enum {
		
		protected Color(int index) : base(index) {
		}
		
		
		public static global::color.Color Rgb(double r, double g, double b) {
			return new global::color.Color_Rgb(r, g, b);
		}
		
		
		public static global::color.Color Hsv(double h, double s, double v) {
			return new global::color.Color_Hsv(h, s, v);
		}
		
		
		public static global::color.Color Named(string name) {
			return new global::color.Color_Named(name);
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace color {
	public sealed class Color_Rgb : global::color.Color {
		
		public Color_Rgb(double r, double g, double b) : base(0) {
			this.r = r;
			this.g = g;
			this.b = b;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.r, this.g, this.b});
		}
		
		
		public override string getTag() {
			return "Rgb";
		}
		
		
		public override int GetHashCode() {
			return global::haxe.lang.Enum.paramsGetHashCode(0, new object[]{this.r, this.g, this.b});
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::color.Color_Rgb en = ( other as global::color.Color_Rgb );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.r) ), ((object) (en.r) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.g) ), ((object) (en.g) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.b) ), ((object) (en.b) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Rgb", new object[]{this.r, this.g, this.b});
		}
		
		
		public readonly double r;
		
		public readonly double g;
		
		public readonly double b;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace color {
	public sealed class Color_Hsv : global::color.Color {
		
		public Color_Hsv(double h, double s, double v) : base(1) {
			this.h = h;
			this.s = s;
			this.v = v;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.h, this.s, this.v});
		}
		
		
		public override string getTag() {
			return "Hsv";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(1, new object[]{this.h, this.s, this.v});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::color.Color_Hsv en = ( other as global::color.Color_Hsv );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.h) ), ((object) (en.h) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.s) ), ((object) (en.s) ))) ) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.v) ), ((object) (en.v) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Hsv", new object[]{this.h, this.s, this.v});
		}
		
		
		public readonly double h;
		
		public readonly double s;
		
		public readonly double v;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace color {
	public sealed class Color_Named : global::color.Color {
		
		public Color_Named(string name) : base(2) {
			this.name = name;
		}
		
		
		public override global::Array<object> getParams() {
			return new global::Array<object>(new object[]{this.name});
		}
		
		
		public override string getTag() {
			return "Named";
		}
		
		
		public override int GetHashCode() {
			unchecked {
				return global::haxe.lang.Enum.paramsGetHashCode(2, new object[]{this.name});
			}
		}
		
		
		public override bool Equals(object other) {
			if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
				return true;
			}
			
			global::color.Color_Named en = ( other as global::color.Color_Named );
			if (( en == null )) {
				return false;
			}
			
			if ( ! (global::Type.enumEq<object>(((object) (this.name) ), ((object) (en.name) ))) ) {
				return false;
			}
			
			return true;
		}
		
		
		public override string toString() {
			return global::haxe.lang.Enum.paramsToString("Named", new object[]{this.name});
		}
		
		
		public readonly string name;
		
	}
}


