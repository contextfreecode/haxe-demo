// Generated by Haxe 4.1.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
Math.__name__ = true;
var color_Color = $hxEnums["color.Color"] = { __ename__ : true, __constructs__ : ["Rgb","Hsv","Named"]
	,Rgb: ($_=function(r,g,b) { return {_hx_index:0,r:r,g:g,b:b,__enum__:"color.Color",toString:$estr}; },$_.__params__ = ["r","g","b"],$_)
	,Hsv: ($_=function(h,s,v) { return {_hx_index:1,h:h,s:s,v:v,__enum__:"color.Color",toString:$estr}; },$_.__params__ = ["h","s","v"],$_)
	,Named: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"color.Color",toString:$estr}; },$_.__params__ = ["name"],$_)
};
var color_Convert = function() { };
color_Convert.__name__ = true;
color_Convert.colorToRgb = function(color) {
	switch(color._hx_index) {
	case 0:
		var _g = color.b;
		var _g = color.g;
		var _g = color.r;
		return color;
	case 1:
		var v = color.v;
		var s = color.s;
		var h = color.h;
		return color_Convert.hsvToRgb(h,s,v);
	case 2:
		var name = color.name;
		return color_Convert.namedColors.h[name];
	}
};
color_Convert.hsvToRgb = function(h,s,v) {
	var c = s * v;
	var h1 = h * 6;
	var x = c * (1 - Math.abs(h1 % 2 - 1));
	var rgb1 = h1 < 1 ? color_Color.Rgb(c,x,0) : h1 < 2 ? color_Color.Rgb(x,c,0) : h1 < 3 ? color_Color.Rgb(0,c,x) : h1 < 4 ? color_Color.Rgb(0,x,c) : h1 < 5 ? color_Color.Rgb(x,0,c) : color_Color.Rgb(c,0,x);
	var m = v - c;
	var rgb;
	if(rgb1._hx_index == 0) {
		var b = rgb1.b;
		var g = rgb1.g;
		var r = rgb1.r;
		rgb = color_Color.Rgb(r + m,g + m,b + m);
	} else {
		throw haxe_Exception.thrown("no match");
	}
	return rgb;
};
var color_Tools = function() { };
color_Tools.__name__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
color_Convert.namedColors = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["red"] = color_Color.Rgb(1.0,0.0,0.0);
	_g.h["yellow"] = color_Color.Rgb(1.0,1.0,0.0);
	_g.h["blue"] = color_Color.Rgb(0.0,0.0,1.0);
	$r = _g;
	return $r;
}(this));
})({});
